@startuml
autonumber

skinparam handwritten true
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor Teacher as Actor
participant ":UpdateQuestionUI" as UI <<presentation>>
participant ":UpdateQuestionController" as Controller <<application>>
participant ":QuestionManagementService" as QuestionManagementService <<application>>
participant ":AuthzRegistry" as AuthzRegistry <<application>>
participant ":Question" as Question<<Domain>>
participant ":PersistenceContext" as Persistence <<persistence>>
participant ":RepositoryFactory" as RepositoryFactory <<factory>>

database ":QuestionRepository" as QuestionRepository <<repository>>
database ":TeacherRepository" as TeacherRepository <<repository>>
database ":CourseRepository" as CourseRepository <<repository>>

database ":JPAQuestionRepository" as JPAQuestionRepository <<repository>>
database ":JPATeacherRepository" as JPATeacherRepository <<repository>>
database ":JPACourseRepository" as JPACourseRepository <<repository>>

activate Actor
Actor -> UI : ask to create question
activate UI
UI->Controller:listCourses()

activate Controller
Controller->QuestionManagementService:listCourses()

activate QuestionManagementService
QuestionManagementService->AuthzRegistry: AuthzRegistry.authorizationService()

activate AuthzRegistry
deactivate AuthzRegistry
QuestionManagementService --> Persistence: create()
activate Persistence


Persistence -> RepositoryFactory: getRepositoryFactory();
activate RepositoryFactory

RepositoryFactory->CourseRepository: courseRepository()
activate CourseRepository
deactivate CourseRepository
RepositoryFactory->QuestionRepository:QuestionRepository()
activate QuestionRepository
deactivate QuestionRepository
RepositoryFactory->TeacherRepository:teacherRepository()
activate TeacherRepository
deactivate TeacherRepository

deactivate RepositoryFactory
deactivate Persistence

QuestionManagementService->TeacherRepository:findTeacherByEmail(systemUser.email())
activate TeacherRepository
TeacherRepository->JPATeacherRepository:findTeacherByEmail(systemUser.email())
activate JPATeacherRepository
deactivate JPATeacherRepository

deactivate TeacherRepository

QuestionManagementService->CourseRepository:coursesByTeachers(teacher)
activate CourseRepository
CourseRepository->JPACourseRepository:coursesByTeachers(teacher)
activate JPACourseRepository
deactivate JPACourseRepository
deactivate CourseRepository


deactivate TeacherRepository
deactivate QuestionManagementService


UI --> Actor : shows list of course and asks to select one
deactivate UI

Actor -> UI : selects course
activate UI
UI --> Actor : shows list of questions and asks to select one
UI -> Controller : listQuestions(selectedCourse)
activate Controller
Controller->QuestionManagementService:listQuestions(selectedCourse)
activate QuestionManagementService
QuestionManagementService->QuestionRepository:listQuestions(selectedCourse)
activate QuestionRepository
QuestionRepository->JPAQuestionRepository:listQuestions(selectedCourse)
activate JPAQuestionRepository
deactivate JPAQuestionRepository
deactivate QuestionRepository
deactivate QuestionManagementService
deactivate Controller
deactivate UI
Actor -> UI : selects question
activate UI

UI -->Actor : asks for the question change input
deactivate UI



Actor -> UI : inputs the question change
activate UI





UI->Controller:UpdateQuestion(question, path)
activate Controller

Controller->QuestionManagementService:UpdateQuestion(question, path)
activate QuestionManagementService
QuestionManagementService->QuestionManagementService:readFileToString(path);
activate QuestionManagementService
deactivate QuestionManagementService

QuestionManagementService->QuestionManagementService:setQuestion(list.get(1))
activate QuestionManagementService
deactivate QuestionManagementService
deactivate Controller
deactivate QuestionManagementService
UI->Controller:saveQuestion(updateQuestion);
activate Controller
Controller->QuestionManagementService:saveQuestion(updateQuestion);
activate QuestionManagementService
QuestionManagementService->QuestionRepository:save(updateQuestion)
activate QuestionRepository
QuestionRepository-> JPAQuestionRepository:save(updateQuestion)
activate JPAQuestionRepository
deactivate JPAQuestionRepository
deactivate QuestionRepository

deactivate QuestionManagementService
deactivate Controller

UI --> Actor : informs operation success or failure
deactivate UI
deactivate Actor

@enduml